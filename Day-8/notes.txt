   # TAble OF Content : BOM : Browser Object Model
                        DOM : Document Object Model


   This All Was a Part of Web API                         Browser Object Model

 What is the BOM ?

The Browser Object Model allows JavaScript to interact with the browser outside of the content of the web page
 (which is managed by the DOM, or Document Object Model).

It provides objects that represent the browser environment, such as:

1.window
2.navigator
3.screen
4.location
5.history {forward(),go(),backward()}
6.alert(), confirm(), prompt() functions
7.Open()  { Opens a New Window Tab and returns a Window Object } You Can also give it a name with open('apnylink','name')
8.Close() {It closes the Tab Which was Opened By the Open() Commmand }
          Scripts may close only the windows that were opened by them.

9.resizeTo() : open('https://youtube.com/','Krishna','resizable') 
10.resizeBy()
11. moveTo()
12. moveBy()
13. scrollBy()
14. scroll()
15. scrollTo()
13. print()
14. Document

# This Allm Commmand Could works only with brower content

Key BOM Objects :  Object	       Description     

                   window	       The global object that represents the browser window. It is the top-level object in BOM.
                   navigator	   Contains information about the browser (like navigator.userAgent).
                   screen	       Contains information about the userâ€™s screen (e.g., screen.width, screen.height).
                   location	     Contains information about the current URL and allows redirection (location.href, location.reload()).
                   history	     Allows navigation through the browser history (history.back(), history.forward()).


Example :    console.log(window.innerWidth/Height);       // Width/Height of the window
             console.log(window.outerWidth/Height);      //  Width/Height of the window
             console.log(navigator.userAgent);           // Info about the browser
             console.log(location.href);           // Current URL
             alert("Hello from BOM!");             // Simple browser alert
             
BOM vs DOM

| Feature  | BOM                                   | DOM                             |
| -------- | ------------------------------------- | ------------------------------- |
| Scope    | Browser-level objects                 | Web page structure and elements |
| Examples | `window`, `navigator`, `location`     | `document`, `getElementById()`  |
| Purpose  | Controls browser settings/environment | Interacts with HTML content     |


ðŸ§ âœ…âœ… : Har Ek Tab Ka Alag Alag Window Object Hota Hai.


   ###  **JavaScript and the DOM â€“ Interacting with the Browser**  ###

- What is the DOM (Document Object Model)?
- Accessing and modifying HTML elements with `document.getElementById()`, `document.querySelector()`, and `document.querySelectorAll()`
- Changing content using `innerHTML`, `textContent`, `value`
- Manipulating styles with `style` property and changing CSS dynamically
- Adding and removing elements with `appendChild()`, `removeChild()`, `insertBefore()`

- **Key Concepts:** DOM Manipulation, Querying elements, Modifying styles and content


                                                 DOM :  DOCUMENT OBJECT MODEL

The Window Object represents an open window in a browser . It is browsers Object (not Javascript's) & is automatically 
created by browser.

It is a global object with lots of properties and method.
# console.log() in a javascript is basically a part of window.

HTML ko javascript ke andar Access krne ka trika hai DOM.

# THERE ARE THE MAIN FOUR PILARS OF DOM ARE : 

1. Selection of an Element . âœ…âœ…
2. Changing HTML Files. âœ…âœ…
3. Changing Css . âœ…âœ…
4. Event Listeners . âœ…âœ…


# Some Moe Important Things Abot Dom HOw TO Access IN Browser :  Commands 

document.children   returns - HtmlCollection
document.children[0] returns - Head
document.children[1] returns - body

document.body   -  returns- body

document.children[0].children 
document.children[0].children[1]


Question : What is Documnet Object model ? 

Whenever we write HTML code , there is a component in our browser called HTML Parser . It Converts every Element in the form of Object
and creates an Object called Documnet . And it is in a window Object . Window Which represents our entire browser . It represents 
different Features Of the Browsers


Document represents view port only .




                                                /* Selection Of an Element */

 1.Selecting with ID :       DOCUMENT.getElementById("IDname")   Their Return value is Null.

 2.Selecting with Class :   DOCUMENT.getElementsByClassName("ClassName")

 3.Selecting with TagName : DOCUMENT.getElementByTagName("h1")
                            1. It returns an array.
                            2. If no elements match the tag, it returns an empty HTMLCollection.

# Query Selectors : 1.querySelector()                  // returns an first Element
                    2.querySelectorAll()               // returns a NodeList

# QuerySelector Example  : 

ðŸ§ª HTML:

<body>
  <h1 id="main-heading">Hello, World!</h1>
  <p class="description">This is a paragraph.</p>

  <script src="script.js"></script>
</body>


ðŸ§  JavaScript (script.js) :   // Select the h1 element by ID

                               const heading = document.querySelector('#main-heading');
                               heading.textContent = 'Hello from querySelector!';

                               // Select the paragraph element by class

                               const paragraph = document.querySelector('.description');
                               paragraph.style.color = 'blue';



# QuerySelectorAll Example  : 
ðŸ§ª HTML:
<body>
  <ul>
    <li class="item">Item 1</li>
    <li class="item">Item 2</li>
    <li class="item">Item 3</li>
  </ul>

  <script src="script.js"></script>
</body>


ðŸ§  JavaScript (script.js):   

// Select all elements with the class "item"
const items = document.querySelectorAll('.item');

// Loop through each item and change its text color
items.forEach((item, index) => {
  item.style.color = 'green';
  item.textContent = `Updated Item ${index + 1}`;
});




                                                   DOM MANIPULATION

1. tag-Name : return tag for element Nodes
2. innerText : return the text content of the element all its  .
 Example : document.body.children[0].innerHTML = 'hell'       all could done in browser 
3. innerHtml : returns the plain text or HTML context in the element.
4. textContent : returns textual Context even for hidden elements.      


#INNERHTML : 



# Difference Between InnerText And TextContent In Dom Manipulation    (\n = New line )


 # GETTER OR SETTER ATTRIBUTES IN JAVASCRIPT : 
  
 After Doing That ON thing in Console.dir It will reurns an Object Value In The frm Of Console.dir

 1.  console.dir(document.querySelector('[krishna]'))            Returns always in Object From me answer



# Changing in Style if css with dom  



for (const link of allLinks) {
  //     link.style.color = 'teal'
  //     link.style.textDecorationLine = 'none'
  //     link.style.fontWeight = '700'
  //     link.style.fontFamily = 'cursive'
  // }



//   link.style.cssText = `  color: teal;
//     font-size: 18px;
//     font-family: cursive;
//     font-weight: 700;
//     text-decoration-line: none;`;

// link.className = 'green-link'

// link.setAttribute('class', 'green-link wavy-link')

console.log(link.classList)

link.classList.add(".hiiii")
    
}


link.classList.add('green-linnk')
link.classList.remove('green-linnk')   // Any another link
link.classList.toggle('green-linnk')  Agar nhi hai class toh lga dega or agar hai us naam ki class toh hta dega .




# HOw to Access Parent sibling and Children Elements using Javascript :

Example : 

const netlink = document.querySelector("#hhj > a:nth-child(2)")
netlink.parentElement   // gives P tag 
netlink.parentElement.parentElement   // gives a body element
netlink.parentElement.parentElement.parentElement   // gives an html Element / Body
netlink.parentElement.parentElement.parentElement.parentNode   // gives an documentObject



netlink.childNodes   // give an nodelist or node 
NodeList[text]

netlink.children  // gives an element  If present on this .

HTMLCollection  [] 

** Jo Element Nhi hota hai vo bi ek node hota hai .


## How To Acces Sibblings : 

1. There was an next and Previos Sibling OCncept was running.

** nextElementsibling   : 

# netlink.nextElementSibling  : gives the next sibbling first one remove krne ke baad .
# netlink.nextElementSibling.nextElementSibling.: gives the next sibbling Second one remove krne ke baad.
netlink.nextElementSibling.nextElementSibling.nextElementSibling : gives the next sibbling Third one remove krne ke baad.
netlink.nextElementSibling.nextElementSibling.nextElementSibling.nextElementSibling  : If he finds nothing then it gives us an NUll.


**previousElementSibling  : 

1. netlink.previousElementSibling : gies FirstOne sibling.




**.nextSibling  : It gives an textNode  

## Difference Between Node or Element : 

| Feature  | **Node**                       | **Element**                                       |
| -------- | ------------------------------ | ------------------------------------------------- |
| Type     | General term                   | Specific type of node                             |
| Includes | Elements, text, comments, etc. | Only tag-based structures                         |
| Example  | Text node, comment node        | `<div>`, `<p>`, `<a>`, etc.                       |
| In DOM   | All are `Node` objects         | Elements are `Element` objects (subclass of Node) |

