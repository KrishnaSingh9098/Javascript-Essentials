
-------------------------------------------- ‚úÖ Closures in JavaScript ---------------------------------------

A closure is created when a function "remembers" variables from the scope where it was defined, even after that scope has exited.

In simple words:

A function inside another function can access variables of the outer function, even after the outer function has finished executing.

üîπ Basic Example: 
                                                           üß† What‚Äôs Happening :
  function outer() {                                       1. outer() is called and returns inner().
    let count = 0;                                         2. count is defined inside outer, but still accessible to inner even after 
                                                              outer has finished.
    function inner() {                                     3.This is a closure: inner "closes over" count.
        count++;
        console.log(count);
    }

    return inner;
}

const counter = outer();  // `outer` returns `inner`, and `count` is preserved

counter();  // Output: 1
counter();  // Output: 2
counter();  // Output: 3



üîπ Visual Representation :                               outer()
                                                         ‚îî‚îÄ‚îÄ count = 0
                                                         ‚îî‚îÄ‚îÄ inner() {
                                                               count++
                                                             }
                                                         return inner
                                                              ‚ñ≤
                                                              |
                                                        counter()  ‚Üê still has access to `count` (via closure)

   üîπ Closures Are Useful For :

1. Data Privacy / Encapsulation : 

function secretHolder(secret) {
    return function() {
        console.log("Secret is:", secret);
    };
}

const tellSecret = secretHolder("JS is awesome!");
tellSecret();  // Output: "Secret is: JS is awesome!"


2.Creating Partially Applied Functions / Currying:

function multiply(x) {
    return function(y) {
        return x * y;
    };
}

const double = multiply(2);
console.log(double(5)); // Output: 10

3.Creating Private Counters :

function createCounter() {
    let count = 0;
    return {
        increment: function() {
            count++;
            return count;
        },
        reset: function() {
            count = 0;
        }
    };
}

const counter = createCounter();
console.log(counter.increment()); // 1
console.log(counter.increment()); // 2
counter.reset();
console.log(counter.increment()); // 1


üîπ Quick Summary :   Concept	      Meaning  
                     Closure	      A function + the scope in which it was created
                     Why Important    Preserves data between calls without polluting global scope
                     Main Uses        Private state, callbacks, event handlers, currying.




--------------------------------------------- CURRYING IN JS -------------------------------------------------------

Currying in Javascript is used to break down Complex function calls into smaller,more manageable steps. It Transforms a function with
multiple arguments into a series of functions , each taking a single arguments.

1. It convers a function with multiple Parametersin a sequence of a functions.
2. Each function takes an single arguments and returns another function until all arguments are received.
3. Helps in functional Programimg by enabling funtional reuability and composition.




Another Example : 


Example : A Email Example 


function sendEmail (to){
   return function(subject){
    return function(body){
        console.log(`Email is Send to " ${to}with subject ${subject}: ${body} `)
    }
   }
}

let step1 = sendEmail('singhgyanendra382@gmail.com')
let step2 = step1("New Order Confirmation")
step2("Hey Krishna ,There was Something for You")                    // Without using ES6 features